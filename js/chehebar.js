
// 2.1
// removed the close button on tree members
// memeber info simply slides in and don't push the tree left, but only zoom buttons
// added safari check for 1 pixel difference with other browsers on squred nav and zoom buttons

// 2.2
// added lock icon with locked tree chek (to implement yet)
// added logged controls
// nav 3d button optimized for browsers without 3d trasform (IE and Opera)
// fixed firefox mousewheel zooming bug (adding mousewheel plugin)

// 2.3
// fixed possibility for blood female to have families
// fixed hexagon svg shape

// 2.4
// tree generation from json object
// changed i-gen... in gen1... classes

$(document).ready(function () {
	
	// set cookie as json object
	$.cookie.json = true;
	
	//
	// >>>>>    INTRO   >>>>>
	
	if ($.cookie("visited") == undefined) {		
		$("#intro .shape.circleblu").one('webkitAnimationEnd animationend',function(){ SecondIntroAnim() });
	} else {
		$("#intro").css('display','none');
		$('#nav').removeClass('hidden-top');
		$('#zoom-panel').removeClass('hidden-top');
		$("#main-window").css({
			'-webkit-transition': 'opacity .9s ease-in-out',
			'-moz-transition': 'opacity .9s ease-in-out',
			'-ms-transition': 'opacity .9s ease-out',
			'-o-transition': 'opacity .9s ease-out',
			'transition': 'opacity .9s ease-in-out',
		});
		$('#main-window').css('opacity',1);
		$('#main-window').css('clip','rect(0 120em 120em 0)');		
	}
			
	function SecondIntroAnim(){
		debug('first ended');
		$("#intro .shape.circleblu").one('webkitAnimationEnd animationend',function(){ ThirdIntroAnim() });
	}
	function ThirdIntroAnim(){
		debug('second ended');		
		$("#intro .shape.circleblu").one('webkitAnimationEnd animationend',function(){ FourthIntroAnim() });
	}
	function FourthIntroAnim(){
		debug('third ended');
		$("#intro .logo-intro").css('opacity','1');
		$("#intro .shape").css('opacity','0');		
		$("#intro .animation").css({
			'-webkit-transition': 'all .4s ease-in-out .3s',
			'-moz-transition': 'all .4s ease-out .3s',
			'-ms-transition': 'all .4s ease-out .3s',
			'-o-transition': 'all .4s ease-out .3s',
			'transition': 'all .4s ease-in-out .3s',
			'top': '-900px'			
		});
		$("#intro .animation").one('webkitTransitionEnd otransitionend msTransitionEnd transitionend',function(){ FifthIntroAnim() });
		
	}
	function FifthIntroAnim(){
		debug('fourth ended');
		$('#nav').removeClass('hidden-top');
		$('#zoom-panel').removeClass('hidden-top');
		$('#main-window').css('opacity',1);
		$('#main-window').css('clip','rect(0 120em 30em 0)');
		$.cookie("visited", true);
	}
	

	// load hexagon images first
	var hexPinkImg = $("<img />");
	hexPinkImg
		.load(function() {			
			//when pink is loaded, start intro
			$("#intro .animation").css('visibility','visible');	
			$("#intro .shape").removeClass('paused');					
	    })
	    .error(function () {
	    	//alert("error");
	    })
	    .attr("src", "img/hex-pink.png");	
	
	var hexBluImg = new Image();
	hexBluImg.src = "img/hex-blu.png";
	
		
	//
	// >>>>>    TREE GENERATION    >>>>>
	//
	
	// variables
	$tree = $("#tree");	
	
	// load json generated by php
	// $.getJSON("getTreeJson.php",function(json){		
	$.getJSON("data/myDataEdits.json",function(json){		
		var oTree = json;
		DisplayTree (oTree,0);	
	});

	var sTree = "";
	
	// vars for store 5 gen trees: to attach them dinamically when user opens them
	var bGen5Open = false;
	var nGen5Counter = -1;		
	
	function OpenGenerationLevel(nGen){
		// define tree orientation depending on generation level
		var sTreeOrientation = "";
		if (nGen == 1 || nGen == 2 || nGen == 3) sTreeOrientation = "horizontal-tree";
		else if (nGen == 4) sTreeOrientation = "vertical-tree";
		else if (nGen == 5) {
			sTreeOrientation = "horizontal-tree-inner visuallyhidden";
			bGen5Open = true;
			nGen5Counter ++;
		}
		else if (nGen == 6) sTreeOrientation = "vertical-tree-inner"; 
		
		var sGen5Id = (bGen5Open && nGen == 5) ? 'rel-gen5Id="' + nGen5Counter + '"' : ''; 		
		var sHtml = '<ul class="gen' + nGen + ' ' + sTreeOrientation + '" '+ sGen5Id +'>';		
		(bGen5Open && nGen != 5) ? aGen5Trees[nGen5Counter] += sHtml : sTree += sHtml;						
	}
	
	function OpenMember(admin){
		var sHtml;
		if (admin != undefined) {
			sHtml = '<li rel-adm="admok" id="admok">';
		} else {
			sHtml = '<li>';
		}				
		(bGen5Open) ? aGen5Trees[nGen5Counter] += sHtml : sTree += sHtml;
	}	
	
	function DisplayConnections(oMember, nGen, i, nTotChildren){
		// define tree orientation depending on generation level
		var sTreeOrientation = "horizontal";
		if (nGen == 4 || nGen >= 6) sTreeOrientation = "vertical";			
				
		// define if children is first, mid or last
		var sFirstMidLast;
		if (i == 0 && nTotChildren == 1) sFirstMidLast = "first-last";
		else if (i == 0  && nTotChildren != 1) sFirstMidLast = "first";
		else if (i == nTotChildren-1) sFirstMidLast = "last";
		else sFirstMidLast = "mid";
		
		// set color for connections
		var sConnectionColor = "dark-beige";		
		
		// check if it's a second/third/etc.. marriage and set the dotted class to add	
		var sDotted = (oMember.n_marriage > 1) ? "dotted" : "";
		var sHtml;
		
		// no connections for the first family (ancestors)
		if (nGen == 1){
			sHtml = "";
		} else {
			// connections for horizontal tree
			if (sTreeOrientation == "horizontal") {
				if (sFirstMidLast == "first-last"){
					sHtml = '<div class="connection top-connection first-last '+ sConnectionColor + '"></div>' +
							'<div class="connection node-connection-top '+ sConnectionColor + '"></div>';
				} else if (sFirstMidLast == "first"){
					sHtml = '<div class="connection top-connection first '+ sConnectionColor + '"></div>' +
							'<div class="connection node-connection-top '+ sConnectionColor + '"></div>';
				} else if (sFirstMidLast == "mid"){
					sHtml = '<div class="connection top-connection '+ sConnectionColor + '"></div>' +
							'<div class="connection node-connection-top '+ sConnectionColor + ' ' + sDotted +'"></div>';
				} else {
					sHtml = '<div class="connection top-connection last '+ sConnectionColor + '"></div>' +
							'<div class="connection node-connection-top '+ sConnectionColor + ' ' + sDotted +'"></div>';
				}
			// connections for vertical tree
			} else {
				if (sFirstMidLast == "first-last"){
					sHtml = '<div class="connection top-connection first vertical '+ sConnectionColor + '"></div>' +
							'<div class="connection side-connection first-last '+ sConnectionColor + '"></div>' +
							'<div class="connection node-connection-side first '+ sConnectionColor + '"></div>';
				} else if (sFirstMidLast == "first"){
					sHtml = '<div class="connection top-connection vertical first '+ sConnectionColor + '"></div>' +
							'<div class="connection side-connection '+ sConnectionColor + '"></div>' +
							'<div class="connection node-connection-side first '+ sConnectionColor + '"></div>';
				} else if (sFirstMidLast == "mid"){
					sHtml = '<div class="connection side-connection '+ sConnectionColor + '"></div>' +
							'<div class="connection node-connection-side '+ sConnectionColor + ' ' + sDotted +'"></div>';
				} else {
					sHtml = '<div class="connection side-connection last '+ sConnectionColor + '"></div>' +
							'<div class="connection node-connection-side '+ sConnectionColor + ' ' + sDotted +'"></div>';
				}
			}			
		}	
					
		(bGen5Open) ? aGen5Trees[nGen5Counter] += sHtml : sTree += sHtml;	
	}
	

	function DisplayFamily(oMember, oSpouse, nGen, i) {
		var sHtml;
		
		var sCenterFamily = (nGen == 1) ? "center-h" : "";
		var sFirst = (i == 0 && (nGen==4 || nGen>=6)) ? "first" : "";
		var MemberColor = function (oPerson){
			if (oPerson.sex == "M") { return "blu"; }
			else if (oPerson.sex == "F") { return "pink"; }
			else { return "yellow"; }
		}
		
		var sAdmin = (oMember.admin) ? 'rel-admin="'+ oMember.admin +'"' : '';		
		
		var sMarriedConnectionClosed = (nGen == "4") ? "closed" : "";
		var sMarriedConnectionButton = (nGen == "4") ? "button" : "";
		var sMarriedConnectionColor = (nGen == "4") ? "white" : "grey";
		var sMarriedConnectionIcon = (nGen == "4") ? "icon-arrow-rounded-down" : "icon-heart";
		var sMarriedConnectionVertical = (oMember.hasChildren) ?  "" : "visuallyhidden";
		var sMarriedConnectionLocked = "";
		
		// if it's locked and not logged, display lock icon
		if (oSpouse.locked == "Y" && !login.logged){
			sMarriedConnectionLocked = "locked";			
			sMarriedConnectionIcon = "icon-lock";
			sMarriedConnectionClosed = "closed";
			sMarriedConnectionButton = "button";
			sMarriedConnectionColor = "white";
		} 
		
				
		// check if it's a second/third/etc.. marriage
		var sOtherMarriage = "";
		var sMarriageNum = "";
		var sMarriageNumHtml = "";	
		if (oMember.n_marriage > 1){			
			sOtherMarriage = "other-marriage";
			if (oMember.n_marriage == 2) sMarriageNum = oMember.n_marriage + "nd";
			if (oMember.n_marriage == 3) sMarriageNum = oMember.n_marriage + "rd";
			if (oMember.n_marriage > 3) sMarriageNum = oMember.n_marriage + "th";
			sMarriageNumHtml = '<div class="n-marriage circle "><div class="icon grey-text">'+ sMarriageNum +'</div></div>';	
		}
		
		sHtml = '<div class="family ' + sCenterFamily + ' ' + sFirst +'" rel-id="' + oSpouse.id_family + '">' +
		
					'<div class="node blood ' + sOtherMarriage +'" rel-id="'+ oMember.id + '" '+ sAdmin +' rel-photo="' + oMember.photo + '">' +
						'<div class="node-front node-bg circle ' + MemberColor(oMember) +'">' +
							'<div class="centerer"><div class="node-content">'+ oMember.name +' '+ oMember.surname +'</div></div>' +
						'</div>' +
						'<div class="node-back node-bg circle hidden-scaledown" style="background: url(' + oMember.photo + ') no-repeat left top;	-webkit-background-size: cover; -moz-background-size: cover; -ms-background-size: cover; -o-background-size: cover; background-size: cover;"></div>' +
						'<div class="node-label white grey-text node-hide-label"><h3 class="center-v">'+ oMember.name +' '+ oMember.surname +'</h3></div>' +
						sMarriageNumHtml +
						'<div class="node-active circle"><div class="icon grey-text icon-text-rounded"></div></div>' +				
					'</div>' +
					
					'<div class="married ' + sOtherMarriage +' ' + sMarriedConnectionClosed + ' ' + sMarriedConnectionLocked +'">' +
						'<div class="connection h-connection dark-beige"></div>' +
						'<div class="connection v-connection '+ sMarriedConnectionVertical +' dark-beige"></div>' +
						'<div class="circle ' + sMarriedConnectionColor + ' ' + sMarriedConnectionButton +'"><div class="' + sMarriedConnectionIcon +'"></div></div>' +
					'</div>' +
					
					'<div class="node in-law" rel-id="'+ oSpouse.id + '" '+ sAdmin +' rel-photo="' + oSpouse.photo + '">' +
						'<div class="node-front node-bg hex-' + MemberColor(oSpouse) +'">' +
							'<div class="centerer"><div class="node-content">'+ oSpouse.name +' '+ oSpouse.surname +'</div></div>' +
						'</div>' +
						'<div class="node-back node-bg hidden-scaledown">' +
							'<svg class="svg-graphic" width="100%" height="100%" viewBox="0 0 560 650" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" version="1.1">'  +   
							    '<image clip-path="url(#hexagonal-mask)" height="100%" width="100%" xlink:href="' + oSpouse.photo +'" />' +				     
							'</svg>' +									
						'</div>' +
						'<div class="node-label white grey-text node-hide-label"><h3 class="center-v">'+ oSpouse.name +' '+ oSpouse.surname +'</h3></div>' +
						'<div class="node-active circle"><div class="icon grey-text icon-text-rounded"></div></div>' +											
					'</div>' +
					
				'</div>';		
		(bGen5Open) ? aGen5Trees[nGen5Counter] += sHtml : sTree += sHtml;		
	}	
	
	function DisplaySingle(oMember, nGen, i){
		var sHtml;
		var sCenterFamily = (nGen == 1) ? "center-h" : "";
		var sMemberStatus = (oMember.status == "family") ? "family" : "single";
		
		var MemberColor = function (oPerson){
			if (oPerson.sex == "M") { return "blu"; }
			else if (oPerson.sex == "F") { return "pink"; }
			else { return "yellow"; }
		}
		
		var sAdmin = (oMember.admin) ? 'rel-admin="'+ oMember.admin +'"' : '';
		
		var sFirst = (i == 0 && (nGen==4 || nGen>=6)) ? "first" : "";	
		sHtml = '<div class="' + sMemberStatus + ' ' + sFirst + ' ' + sCenterFamily + '">' +
					'<div class="node blood" rel-id="'+ oMember.id +'" '+ sAdmin +' rel-photo="' + oMember.photo + '">' +
						'<div class="node-front node-bg circle ' + MemberColor(oMember) +'">' +
							'<div class="centerer"><div class="node-content">'+ oMember.name +' '+ oMember.surname +'</div></div>' +
						'</div>' +
						'<div class="node-back node-bg circle hidden-scaledown" style="background: url(' + oMember.photo + ') no-repeat left top;	-webkit-background-size: cover; -moz-background-size: cover; -ms-background-size: cover; -o-background-size: cover; background-size: cover;"></div>' +
						'<div class="node-label white grey-text node-hide-label"><h3 class="center-v">'+ oMember.name +' '+ oMember.surname +'</h3></div>' +
						'<div class="node-active circle"><div class="icon grey-text icon-text-rounded"></div></div>' +			
					'</div>' +
				'</div>';	
		(bGen5Open) ? aGen5Trees[nGen5Counter] += sHtml : sTree += sHtml;					
	}

	function CloseMember (){
		var sHtml = '</li>';		
		(bGen5Open) ? aGen5Trees[nGen5Counter] += sHtml : sTree += sHtml;
	}
	
	function CloseGenerationLevel(nGen){
		var sHtml = '</ul></li>';
		if (nGen == 5) {
			sTree += '</ul>';
		} else {			
			(bGen5Open) ? aGen5Trees[nGen5Counter] += sHtml : sTree += sHtml;
		}		
		if (nGen == 5) bGen5Open = false;
	}
	
	// scan the tree and display html
	function DisplayTree (oTree,nGen){		
		if (oTree.children != undefined){
		
			// update generation level
			nGen +=1;
			OpenGenerationLevel(nGen);
			
			// scan for children and retrieve member basic info
			$.each(oTree.children, function(i, member){				
								
				var oMember = new Object();
				
				// set this tree admin true or false
				if (member.admin != undefined){	
					oMember.admin = member.admin;
				}
				
				OpenMember(member.admin);				
												
				oMember = {
						id: member.id,
						sex: member.sex,
						name: member.name,
						surname: member.surname,
						photo: member.photo																		
				}	
				
				// set this tree admin true or false
				if (member.admin != undefined){	
					oMember.admin = member.admin;
				}
				
				// set variable if has childre
				if (member.children != undefined){	
					oMember.hasChildren = true;
				}				
				
				// find spouse
				if (member.spouse != undefined){
					oMember.status = "family";					
					var spouse = member.spouse[0];					
					var oSpouse; 
					oSpouse = {
						id: spouse.id,
						sex: spouse.sex,
						locked: spouse.locked,
						id_family: spouse.id_family,
						name: spouse.name,
						surname: spouse.surname,
						photo: spouse.photo	
					}
					
					// check if it's a second/third/etc.. marriage							
					// check if the previous child id is equal to this member id and set marriage number, recursively, 
					function SetMarriageNumber(j)	{
						oMember.n_marriage = j;
						var sPreviousChildId;
						if (oTree.children[i-j]) sPreviousChildId = oTree.children[i-j].id;					
						if (oMember.id == sPreviousChildId) {
							oMember.n_marriage += 1;
							j++;
							SetMarriageNumber(j);					
						} 
					}	
					SetMarriageNumber(1);					
										
										
					DisplayConnections(oMember, nGen, i, oTree.children.length);
						
					// display entire family	
					DisplayFamily(oMember, oSpouse, nGen, i);
											
				} else {	
					oMember.n_marriage = 0;	
					oMember.status = "single";							
					DisplayConnections(oMember, nGen, i, oTree.children.length);			
					// display the single member (as it isn't married)				
					DisplaySingle(oMember, nGen, i);
				}								
				
				
				// recursive function to scan member children (and the entire tree)
				DisplayTree(member,nGen);
							
				
				// if children are finished, close generation level				
				if (i == oTree.children.length-1){
					CloseGenerationLevel(nGen);
					// if we are in the first generation, the tree is ended, so append the html to the page
					if (nGen == 1){	
						$tree.css("visibility","hidden");					
						$tree.append(sTree);
						sTree = "";
						
						// append name origin
						DisplayNameOrigin();
						
						// attach actions to tree nodes
						AssignTreeNodeActions($("#tree .node"));
						
						// attach actions to open/lock buttons						
						AssignTreeOpenActions($("#tree"));
						
						// attach a gen5 if administered
						CheckAttachGen5AdministeredTree();
						
						// enable panzoom on the tree						
						SetTreePanZoom();
						
						HideLockedTrees();							
						
						// open Administrated tree for collaborators and set white connections on it
						OpenHighlightAdminTree();
						
						// restore previous tree and window state, and give visibility to the tree
						RestorePreviousState();							
						
						// adapt gen2 connections to centered nodes (because there is only 1 (+1unknown) child)						
						$("#tree .gen2 .family").first().css("margin-left","11.5em");
						$("#tree .gen2 .top-connection").first().css("clip","rect(0em 100em .5em 12.5em)");
						$("#tree .gen2 .node-connection-top").first().css("margin-left","11.5em");
											
										
					}
				// else simply close member	
				} else {
					CloseMember();	
				}								
			});		
		} 
	}
	
	

	// center functions
	CenterVertically ($(".center-v"));
	CenterHorizontally ($(".center-h"));
		
	// safari check for 1 pixel difference with other browsers on squred nav and zoom buttons
	if (navigator.userAgent.indexOf('Safari') != -1 && navigator.userAgent.indexOf('Chrome') == -1){
		$(".icon").css("padding",".85em");
	}
	
	// remove button 3d on ipad and iphone because they don't display correctly (black border)
	var isiPad = /ipad/i.test(navigator.userAgent.toLowerCase());
	var isiPhone = /iphone/i.test(navigator.userAgent.toLowerCase());
	if (isiPad || isiPhone) {
		$("#nav").find(".cl-effect-2").removeClass("cl-effect-2");
		$("#zoom-panel").find(".cl-effect-2").removeClass("cl-effect-2");
	}	 
		
		
	//
	// >>>>>    TREE    >>>>>
	//
	
	
	//
	// -----   STORES AND RETRIEVE TREE and Member Info STATE  -----
	//
	
	  
    // function that retrieve the state of the tree
    function RestorePreviousState(){
    	 var oTreePreviousState = new Object();   	
    	
    	// if there is an hashtag, set the tree state as the hashtag
    	if (window.location.hash){    						
			var sHash = window.location.hash;
			var sTreeState = sHash.slice(1,sHash.length);			
		    sTreeState = sTreeState.replace(/\(/g, '{');
		    sTreeState = sTreeState.replace(/\)/g, '}');
		    sTreeState = sTreeState.replace(/\?/g, '[');
		    sTreeState = sTreeState.replace(/\!/g, ']');
		    sTreeState = sTreeState.replace(/\_/g, '"');		   
			oTreePreviousState = $.parseJSON(sTreeState);			
			RestoreTree(oTreePreviousState);
		// else set the tree state from cookie, if exists 
		} else {
			if ($.cookie('data')!= undefined) {												   		
    			oTreePreviousState = $.cookie('data');    			
    			RestoreTree(oTreePreviousState);				   
			} else {				   
			    // show scrool to zoom if not already shown in this session					
			    ScrollToZoomTooltip(false);					    		    
			    // render the tree visible
			    $("#tree").css("visibility","visible");
			}				
		}
    }
    
    // function that retrieve the state of the tree and opened member info, used when go to backend and then back to frontend, or from direct link hastag
    function RestoreTree(oTreePreviousState){     		
		// add previously opened members
    	oTreeState.aClickedMembersId = oTreePreviousState.aClickedMembersId;  
    	// add previously opened trees
    	oTreeState.aOpenedTrees = oTreePreviousState.aOpenedTrees;
    	
    	oTreeState.bScrolled = oTreePreviousState.bScrolled;  
    	
    	// open previously opened trees
		if (oTreePreviousState.aOpenedTrees.length){
			for (i=0; i<oTreePreviousState.aOpenedTrees.length; i++){
				var $family = $("#tree .family[rel-id='"+ oTreePreviousState.aOpenedTrees[i] +"']");
				openTree($family.parent().find("ul").first(), $family.find(".married").find(".circle"));							
			}
		}
    						
		// restore previous state
		if (oTreePreviousState.bMemberInfo){
			// restore opened member info
			var updated = function(){
				$(".member-info").removeClass("member-info-out");
				$("#zoom-panel").removeClass("member-out");
				HideLogo();
				// set variable for member info open
				bMemberOpen = true;		
				// remove loading
				$node.find(".node-active").removeClass("loading");									
			}					
			// if previously clikced member still exists
			var $node = $("#tree .node[rel-id='"+ oTreePreviousState.aClickedMembersId[oTreePreviousState.aClickedMembersId.length-1] +"']");	
			if ($node.length > 0){							
				updateMemberInfo($node, updated);	
				// give visibility to info icon on clicked member, remove from others, activate loading					
				$("#tree .node").removeClass("active");
				$node.addClass("active");
				$node.find(".node-active").addClass("loading");	
			}						
		}
		
		// open previously clicked members
		if (oTreePreviousState.aClickedMembersId.length) {
			for (i=0; i<oTreePreviousState.aClickedMembersId.length; i++){
				var $node = $("#tree .node[rel-id='"+ oTreePreviousState.aClickedMembersId[i] +"']");
				$node.find(".node-back").removeClass("hidden-scaledown");
			    $node.find(".node-label").removeClass("node-hide-label");
			    $node.data("bClicked", true);
			}
		}
		
		// show scrool to zoom if not already shown in this session					
		ScrollToZoomTooltip(oTreePreviousState.bScrolled);		
		
		// restore tree zoom and pan
		$("#tree").panzoom("setMatrix", oTreePreviousState.aTreeMatrix);
		
		// render the tree visible
		$("#tree").css("visibility","visible");	
	}	
	
		
	//
	// -----   FUNCTION THAT DISPLAYS NAME ORIGIN POPUP OVER THE FIRST TREE NODE  -----
	//
	
	function DisplayNameOrigin(){
	
		// >>>>>    ATTACH NAME ORIGIN html	 >>>>>
		//var sNameOrigin =   '<div id="name-origin" class="center-h">'+
								 //'<div class="text white grey-text scaledown">'+
									//'<span class="title dark-grey-text"><h1>SHEHEBAR</h1><h2>NAME ORIGIN</h2></span>'+
									//'<p>All Because Two People Fell in Love,<br/>'+
									//'but all his children were dying at birth, so he went to the<br/>'+
									//'Cheif Rabbi in Aleppo, Syria (where he lived).<br/>'+
									//'The Cheif Rabbi told him to change his last name,<br/>'+
									//'so he changed it to Shehebar.<br/><br/>'+									
									//'The true meaning of the word Shehebar is:<br/>'+
									//'<strong>Shehe</strong> (Shechai, To Live) <strong>Bar</strong> (Boy)<br/>'+
									//'<strong>The Boy Should Live</strong><br/>'+
									//'And all the children he had after that had lived.'+
									//'</p>'+							
								//'</div>'+							
								//'<div class="button icon-pin">'+	
									//'<div class="icon white-text icon-name-origin"></div>'+							
									//'<div class="icon grey-text icon-leaves"></div>'+									
								//'</div>'+												
							//'</div>'
		//$('#tree .gen1:first-child').prepend(sNameOrigin);		
	
		
		// >>>>>    NAME ORIGIN EVENTS	 >>>>>
		
		$("#name-origin .button").hover(function () {
			    if (!bNameOrigin) $(this).addClass('hover');
			}, 
			function () {
			    if (!bNameOrigin) $(this).removeClass('hover');
		});	
		
		$("#name-origin").hover(function () {		   
			}, 
			function () {
			    if (bNameOrigin){
			    	$("#name-origin .text").addClass("scaledown");
			    	$("#name-origin .button").removeClass('hover')
				    bNameOrigin = false;
			    }
		});		
		
		var bNameOrigin = false;
		$("#name-origin .button").on('touchend click', function(e){
			e.stopPropagation();	
			if (!bNameOrigin){
				$("#name-origin .text").removeClass("scaledown");
				bNameOrigin = true;
			} else {
				$("#name-origin .text").addClass("scaledown");
				bNameOrigin = false;
			}		
		});
		
		$("#tree").on('touchend click', function(e){
			if (bNameOrigin) {
				$("#name-origin .text").addClass("scaledown");
			    $("#name-origin .button").removeClass('hover')
				bNameOrigin = false;
			}
		});
	
	
	}
	
	
	//
	// >>>>>   MEMBER INFO    >>>>>
	//
	
	// close member info
	$(".member-info .button .close").on('touchend click', function(e) {		
		$(".member-info").addClass("member-info-out");
		$("#zoom-panel").addClass("member-out");
		$("#tree .node").removeClass("active");
		bMemberOpen = false;	
		ShowLogo();
		// set TreeState variable
		oTreeState.bMemberInfo = false;								 
		//dataSave.saveData(JSON.stringify(oTreeState));
		$.cookie("data", oTreeState);
	});	
	
	
	
	//
	// >>>>>    TREE ZOOM and PAN   >>>>>
	//
	 
	function SetTreePanZoom(nInitialScale){		
		// make the tree draggable and zoomable	
		var $panzoom = $('#tree');
		$panzoom.panzoom();
		
		$panzoom.panzoom("option", {
			increment: 0.7,
			minScale: 0.1,
			maxScale: 12,
			duration: 200			
			//$reset: $("a.reset-panzoom, button.reset-panzoom")
		});
		
	
		// set initial scale
		var nInitialScale = .4;		
		
		var oCoord = {clientX:0,clientY:0};
		$panzoom.panzoom("zoom", nInitialScale, { focal: oCoord });
		
		// center single line labels
		CenterVertically ($(".center-v"));
						
		// center first gen family
		CenterHorizontally ($(".center-h"));		

		var nTreeCenteredX =  $(window).width()/2 - ($("#tree .gen1 .family").first().offset().left+105);		
		var nTreeTopY = ($(window).width() > 1250) ? 90 : 80;		
		//move the tree more down if in iphone portrait
		if (isiPhone) if (window.innerHeight > window.innerWidth) nTreeTopY = 250;			
		
		$("#tree").panzoom("pan", nTreeCenteredX, nTreeTopY, { relative: true });	
		
		// repeat center if window is resized
		$(window).resize(function() {
			CenterTree();
		});
		// set position for reset button
		var aTreeResetMatrix = $panzoom.panzoom("getMatrix");
		
		
		// save data to set the tree to previous state
		$panzoom.on('panzoomend', function(e) {
			oTreeState.aTreeMatrix = $panzoom.panzoom("getMatrix");
			//dataSave.saveData(JSON.stringify(oTreeState));
			$.cookie("data", oTreeState);
		});			
	    
	    
	    // enable mousewheel zoom
		$panzoom.parent().on('mousewheel.focal', function( e ) {
			// proportional scale increment varying with scale
			var aMatrixArray = $panzoom.panzoom("getMatrix");
	    	var nIncrement = 0.05;
	    	if (!isiPad || !isiPhone) {
		    	if (aMatrixArray[0] <= 0.4) nIncrement = 0.01;
			    if (aMatrixArray[0] > 2) nIncrement = 0.2;	
			} else {
				var nIncrement = 0.02;
			}	    
	
	        e.preventDefault();
            var delta = e.delta || e.originalEvent.wheelDelta;
            var zoomOut = delta ? delta < 0 : e.originalEvent.deltaY > 0;
            $panzoom.panzoom('zoom', zoomOut, {
              increment: nIncrement,
              focal: e
            });
            // set scrolled cookie
            oTreeState.bScrolled = true;								 
			//dataSave.saveData(JSON.stringify(oTreeState));
			oTreeState.aTreeMatrix = $panzoom.panzoom("getMatrix");
			$.cookie("data", oTreeState);
	    });   
	    	
	    
	    $("#zoom-panel .zoom-in-button").click(function (e){
	    	// proportional scale increment varying with scale
	    	var aMatrixArray = $panzoom.panzoom("getMatrix");
	    	var nIncrement = 0.3;
	    	if (aMatrixArray[0] <= 0.4) nIncrement = 0.1;
		    if (aMatrixArray[0] > 0.8) nIncrement = 0.5;
		    if (aMatrixArray[0] > 1.5) nIncrement = 0.9;
		    if (aMatrixArray[0] > 3) nIncrement = 1.5;		    
		    
	    	e.preventDefault();
	    	var oWindowCenter = {clientX:$(window).width()/2,clientY:$(window).height()/2};
	    	$panzoom.panzoom("zoom", {
	    		focal: oWindowCenter,
	    		animate: true,
	    		increment: nIncrement
	    	});
	    	oTreeState.aTreeMatrix = $panzoom.panzoom("getMatrix");
	    	$.cookie("data", oTreeState);
	    });	
	    $("#zoom-panel .zoom-out-button").click(function (e){
	     	// proportional scale increment varying with scale
	    	var aMatrixArray = $panzoom.panzoom("getMatrix");
	    	var nIncrement = 0.3;    	
	    	if (aMatrixArray[0] <= 0.4) nIncrement = 0.06;
		    if (aMatrixArray[0] > 0.8) nIncrement = 0.5;
		    if (aMatrixArray[0] > 1.5) nIncrement = 0.9;
		    if (aMatrixArray[0] > 3) nIncrement = 1.5;
		    
	    	e.preventDefault();
	    	var oWindowCenter = {clientX:$(window).width()/2,clientY:$(window).height()/2};
	    	$panzoom.panzoom("zoom",true,{
	    		focal: oWindowCenter,
	    		animate: true,
	    		increment: nIncrement
	    	});
	    	oTreeState.aTreeMatrix = $panzoom.panzoom("getMatrix");
	    	$.cookie("data", oTreeState);
	    });
	     $("#zoom-panel .reset-button").click(function (e){
		    e.preventDefault();
	    	$panzoom.panzoom("setMatrix", aTreeResetMatrix);
	    	oTreeState.aTreeMatrix = aTreeResetMatrix;
	    	$.cookie("data", oTreeState);
	    });
	 }
	 
	 
	// center the tree: window width - first family offset left + first family half width
	function CenterTree(){
		var nTreeCenteredX =  $(window).width()/2 - ($("#tree .gen1 .family").first().offset().left+105);				
		$("#tree").panzoom("pan", nTreeCenteredX, 0, { relative: true });	
	}

	
	
	//
	// >>>>>    NAVIGATION    >>>>>
	//
	
	// open and close the nav
	var bNav = false;
	var bNavHideMember = false;
	var bLogoOpened = false;
	
	$("#nav .menu-button").click(function () {		
		if (bNav) NavClose();
		else NavOpen();		
	});		
	
	function NavOpen(){		
		$("#nav .hidden-nav").css("visibility","visible");
		$("#nav .hidden-nav").css("width","1em");	
		$("#nav .hidden-nav").css("margin-right","1px");
		bNav = true;
		HideLogo();
		// hide memeber panel
		if (bMemberOpen) {	
			$(".member-info").addClass("member-info-out");
			$("#zoom-panel").addClass("member-out");
			bNavHideMember = true;
			bMemberOpen = false;
		}	
	}
	
	function NavClose(){		
		$("#nav .hidden-nav").css("visibility","hidden");
		$("#nav .hidden-nav").css("width","0");	
		$("#nav .hidden-nav").css("margin-right","0");
		bNav = false;		
		// show memeber panel
		if (bNavHideMember) {	
			$(".member-info").removeClass("member-info-out");
			$("#zoom-panel").removeClass("member-out");
			bNavHideMember = false;
			bMemberOpen = true;
		} else {
			ShowLogo();
		}	
	}
	
	
	
	// always hide logo on smaller screens
	if (window.screen.width < 1200) $("#nav .logo").css("clip","rect(0 2.09em 1em 0)");	
	
	$("#tree").on('touchstart mousedown', function() {	
		 if (bNav) NavClose();
	});	
	
		
	
	// INFO
	
	$("#nav .info-button").click(function () {		
		$('#info').removeClass('hidden-left');
		$('#info p').removeClass('transparent');
		$('#st-container').addClass('hidden-right');
		NavClose();	
	});
	$("#info .close").click(function () {		
		$('#info').addClass('hidden-left');
		$('#info p').addClass('transparent');
		$('#st-container').removeClass('hidden-right');	
	});	
		
	
	// CREATE LINK FOR DIRECT ACCESS TO SETTED TREE
		
	$("#btnCreatelink").click(function () {	
		var sTreeState = $.cookie('data');	
		sTreeState = JSON.stringify(sTreeState);			 			
	    sTreeState = sTreeState.replace(/\{/g, "(");
	    sTreeState = sTreeState.replace(/\}/g, ")");
	    sTreeState = sTreeState.replace(/\[/g, "?");
	    sTreeState = sTreeState.replace(/\]/g, "!");
	    sTreeState = sTreeState.replace(/\"/g, "_");
	    sTreeState = document.URL + '#' + sTreeState;			   			    
	    alert(sTreeState);		
	});
	
	
	//
	// >>>>>    SCROLL TO ZOOM TOOLTIP   >>>>>
	//
	function ScrollToZoomTooltip(bScrolled){		
		// if not already zoomed in this session and not a touch device
		if (!bScrolled && !Modernizr.touch){					
		    
		    var bScrollToZoom = false;
			$("#tree .node").on('mouseover', function(e){
				if (!bScrollToZoom){
					
					$(document).on('mousemove', function(e){				
					    $('#scroll-to-zoom').css({
					       left:  e.pageX - $('#scroll-to-zoom').width()-60,
					       top:   e.pageY - $('#scroll-to-zoom').height()/2
					    });
				    });
				
					$('#scroll-to-zoom').removeClass("scaledown");
					bScrollToZoom = true;
					oTreeState.bScrolled = true;								 
				    //dataSave.saveData(JSON.stringify(oTreeState));
				    $.cookie("data", oTreeState);				   
					
					$("#tree").bind('mousewheel', function(e){				        
			            $('#scroll-to-zoom').addClass("scaledown");
			            $(this).unbind('mousewheel');
			            oTreeState.bScrolled = true;								 
			            //dataSave.saveData(JSON.stringify(oTreeState));
			            $.cookie("data", oTreeState);			           
				    });
					
					setTimeout( function() {
					    $('#scroll-to-zoom').addClass("scaledown");
					}, 3000 );	
				}		 
			});
		}
	}

	
		
}); //documet ready end -->


// var that stores the state of the tree and opened member info, used when go to backend and then back to frontend
var oTreeState = new Object();
oTreeState.aClickedMembersId = new Array();
oTreeState.aOpenedTrees = new Array();
oTreeState.aTreeMatrix = new Array();
oTreeState.bMemberInfo = false;
oTreeState.bScrolled = false;


function updateMemberInfo($node, updated) {
	updated()
	var sex = '';
	var isSingle = false;
	var tipo = 'blood';
	var contesto = $node;
	if (contesto.hasClass('in-law')) {
		tipo = 'in-law';
	}
	if (contesto.children().hasClass('pink')) {
		sex='F';
	} else {
		if (contesto.children().hasClass('hex-blu') || contesto.children().hasClass('blu')) {
			sex='M';
		} else {
			sex='U';
		}
	}
	//	chech if the user is member of a family or not
	var family_id='';	
	var top_family_id='';
	var treePassword='1';
	var adm = '0';
	if($node.parent().hasClass('family')) {
		top_family_id = $node.parent().parent().parent().prev().attr('rel-id');
		family_id = $node.parent().attr('rel-id');
	} else {
		// user is a single, have to go back by 3 level to find the correct family id
		top_family_id = $node.parent().parent().parent().prev().attr('rel-id');
		isSingle = true;
	}
	if($node.parent().parent().parent().hasClass('gen4')) {
		treePassword='1';
	}
	var test= $node.closest('li[rel-adm="admok"]');
	if (test.attr('id')) {
		adm='1';
	}
    
	$('.member-content').load('getUserData.php?id=' + contesto.attr('rel-id') + '&top_family_id=' + top_family_id + '&id_family=' + family_id + '&sex=' + sex + '&isSingle=' + isSingle + '&treepassword='+ treePassword + '&adm=' + adm + '&tipo=' + tipo + '&image=' + contesto.attr('rel-photo'), function() {	
		updated();
	});		
}


//
// -----   HIDE AND SHOW FULL LOGO  -----
//

function ShowLogo(){
		if (window.screen.width > 1200)	$("#nav .logo").css("clip","rect(0 4.3em 1em 0)");
}

function HideLogo(){
	if (window.screen.width > 1200)	$("#nav .logo").css("clip","rect(0 2.09em 1em 0)");
}

//
// -----   FUNCTION THAT ASSIGNS CLICK AND OVER ACTIONS TO TREE NODES  -----
//


var bMemberOpen = false;

function AssignTreeNodeActions($node){

	//
	// >>>>>    NODE OVER/CLICK   >>>>>
	//		
	
	// show node photo and label on node over
	$node.hover(
		
		function () {
		  if (!$(this).data("bClicked")){
		  	   
			 // if not already open show node photo and label
		  	 var $nodeBack = $(this).find(".node-back");		  	 	
		  	  
		  	 $nodeBack.removeClass("hidden-scaledown");
		  	 $nodeBack.css("opacity",0);  
			 $nodeBack.css("width","0%");
			 $nodeBack.css("height","0%");				
			
			 $nodeBack.css("left",$(this).width()/2);
			 $nodeBack.css("top",$(this).height()/2);			
			
			 $nodeBack.animate({
				"width" : "100%",
				"height" : "100%",
				"left" : "0",
				"top" : "0",
				"opacity": "1"
				}, 250, function () {
			 });
			 	
			 
		  	 var $nodeLabel = $(this).find(".node-label");		  	 	
		  	  
		  	 $nodeLabel.removeClass("node-hide-label");
		  	 $nodeLabel.css("opacity",0); 
		  	 $nodeLabel.css("bottom","-3em");				
			
			 $nodeLabel.animate({
			 	"bottom": "-1em",			
				"opacity": "1"
				}, 250, function () {
			 });	
			
			 
			 
		  } 	  		
	  },
	  function () {
		  // close node on rollout only if not already open
		  if(!$(this).data("bClicked")){
		  	 var $nodeBack = $(this).find(".node-back");
		  	 var $nodeLabel = $(this).find(".label");					
		  	 var $node = $(this);
			 $nodeBack.animate({
				"width" : "0%",
				"height" : "0%",
				"left" : $node.width()/2,
				"top" : $node.height()/2,
				"opacity": "0"
				}, 250, function () {
			 });
			 
			 var $nodeLabel = $(this).find(".node-label");		  	 	
		  	  
		  	 $nodeLabel.removeClass("node-hide-label");		  	 				
			
			 $nodeLabel.animate({
			 	"bottom": "-2em",			
				"opacity": "0"
				}, 200, function () {
			 });		  	  
		  }
	  }
	);	
	
	//
	// -----   NODE CLICK  -----
	//
	
	// node remain out	
	$node.data("bClicked", false);
	
	// show/hide member info only when click and not drag	
	var bNodeClicking = false;
	var bTreeMoved = false;		
	
	$node.on('touchstart mousedown', function(e) {	
	    bNodeClicking = true;
	    bTreeMoved = false;	   
	});	
	$node.on('touchend mouseup', function(e) {
		OpenHighlightAdminTree();			
	    bNodeClicking = false;
	    $memberInfo = $(".member-info");
	    $node = $(this);
	    if (!bTreeMoved){
	    	// clicked and not moved
	    	// show memeber info   
	    	// if memebr info is not already opened, reveal 	
			if(!bMemberOpen){
				var updated = function(){
					$memberInfo.removeClass("member-info-out");
					$("#zoom-panel").removeClass("member-out");
					HideLogo();														
					// set variable for member info open
					bMemberOpen = true;
					//remove loading and show text icon on info icon
					$node.find(".node-active.loading").removeClass("loading");
					// set TreeState variables
					oTreeState.bMemberInfo = true;
					oTreeState.aClickedMembersId.push($node.attr('rel-id'));						
					//dataSave.saveData(JSON.stringify(oTreeState));
					$.cookie("data", oTreeState);						
				}					
				updateMemberInfo($(this), updated);	
				// give visibility to info icon on clicked member, remove from others, activate loading						
				$("#tree .node").removeClass("active");
				$node.addClass("active");
				$node.find(".node-active").addClass("loading");					

			} else {
				// hide member info only if CSS transitions are supported
				if(Modernizr.csstransitions) { 
					$memberInfo.addClass("member-info-out");
					$("#zoom-panel").addClass("member-out");
					// give visibility to info icon on clicked member, remove from others, activate loading						
					$("#tree .node").removeClass("active");
					$node.addClass("active");
					$node.find(".node-active").addClass("loading");						
					// on transition end..
					$memberInfo.one('webkitTransitionEnd otransitionend msTransitionEnd transitionend', function(e) {
			    			 // change info 
			    			 // show and scroll to top
							 var updated = function(){
								$memberInfo.removeClass("member-info-out");
								$("#zoom-panel").removeClass("member-out");
								HideLogo();
								$memberInfo.animate({scrollTop:0}, "slow");									
								// set variable for member info open
								bMemberOpen = true;		
								//remove loading and show text icon on info icon
								$node.find(".node-active.loading").removeClass("loading");					
								// set TreeState variables
								oTreeState.bMemberInfo = true;
								oTreeState.aClickedMembersId.push($node.attr('rel-id'));									
								//dataSave.saveData(JSON.stringify(oTreeState));
								$.cookie("data", oTreeState);						
							}
							updateMemberInfo($node, updated);									
			    	});
			    // else if CSS transitions are not supported, just change member info		    
				} else {
					var updated = function(){							
						$memberInfo.animate({scrollTop:0}, "slow");							
						//remove loading and show text icon on info icon
						$node.find(".node-active.loading").removeClass("loading");					
						// set TreeState variables							
						oTreeState.aClickedMembersId.push($node.attr('rel-id'));									
						//dataSave.saveData(JSON.stringify(oTreeState));
						$.cookie("data", oTreeState);						
					}
					updateMemberInfo($node, updated);
					// give visibility to info icon on clicked member, remove from others, activate loading						
					$("#tree .node").removeClass("active");
					$node.addClass("active");
					$node.find(".node-active").addClass("loading");	
				}
			}
						    
		    // for touch devices: show member photo and label
		    $(this).find(".node-back").removeClass("hidden-scaledown");
			$(this).find(".node-label").removeClass("node-hide-label");
			
		    // set variable for leave node opened
		    $(this).data("bClicked", true);
		    		         
	    }	    
	})	
	$node.on('touchmove mousemove', function(e) {	
	    if(bNodeClicking == false) return;
	    bTreeMoved = true;	    
	});	
}	



//
// >>>>>   ASSIGN OPEN OR CLOSE action for closed or locked trees    >>>>>
//

function AssignTreeOpenActions($mainTree){
		
	$mainTree.find(".married").find(".circle").on('touchend click', function(e) {	
		var $tree = $(this).parent().parent().parent().find("ul").first();
		var $family = $(this).parent().parent();			
		// if the tree is closed
		if ($(this).parent().hasClass("closed")){				
			// if the tree is locked
			if($(this).find(':first-child').hasClass('icon-lock')) {
				treePassword.checkTreePasswordStatus($(this).closest('.family').attr('rel-id'), $tree, $(this));			
			} else {
				openTree($tree, $(this));										
				oTreeState.aOpenedTrees.push($family.attr('rel-id'));
				//dataSave.saveData(JSON.stringify(oTreeState));
				$.cookie("data", oTreeState);
			}
		// if the tree is opened	
		} else if ($(this).parent().hasClass("opened")){			
			// remove visibility on v gen tree			
			$tree.removeClass("visuallyvisible");		
			$tree.addClass("visuallyhidden");
			$tree.css("overflow","hidden");
			
			// change married connection from heart to arrow
			$(this).addClass("white").removeClass("grey");
			$(this).find(".icon-heart").addClass("icon-arrow-rounded-down").removeClass("icon-heart");
			$(this).parent().removeClass("opened").addClass("closed");	
			
			var nNodeIndex = oTreeState.aOpenedTrees.indexOf($family.attr('rel-id'));
			oTreeState.aOpenedTrees.splice(nNodeIndex, 1);
			//dataSave.saveData(JSON.stringify(oTreeState));
			$.cookie("data", oTreeState);	
		}
	});	
	
}



//
// -----   FUNCTION THAT automatically opens and highlight the administered trees for collaborators  -----
//	

function OpenHighlightAdminTree(){		
	$node = $("#tree .node.blood");
	
	$node.each(function() {		
		var relAdmin = $(this).attr('rel-admin');
		// if node has the rel-admin attribute							
		if (typeof relAdmin !== 'undefined' && relAdmin !== false) {
					
		 	// open if closed
		 	
		 	var $nodeUl = $(this).parent().parent().parent();
		 	var $married;
		 	// if it is or contains closed trees
		 	if ($nodeUl.find(".closed").length){
			 	$married = $nodeUl.find(".closed");	
			 				 				 		 	
			// else if it is contained in a 4 gen closed tree
		 	} else if ($nodeUl.closest(".gen4").length) {			 					 		
		 		$married = $nodeUl.closest(".gen4").find(".closed").first();		 				 		
		 	}
		 	// if married, open it
		 	if (typeof $married !== 'undefined' && $married !== false){		 	
			 	var $tree = $married.parent().parent().find("ul").first();
			 	openTree($tree, $married.find(".circle").first());
			 	var $family = $married.parent();
				oTreeState.aOpenedTrees.push($family.attr('rel-id'));
				//dataSave.saveData(JSON.stringify(oTreeState));
				$.cookie("data", oTreeState);
		 	}			 	
		 	
		 	// highlight connections 				
			var $subNodeUl = $(this).parent().parent().find("ul");		
			$(this).parent().find(".married").find(".connection").removeClass("dark-beige").addClass("white");			 						 	
		 	$subNodeUl.find(".connection").removeClass("dark-beige").addClass("white");	
		 }		 			 	
	});			
}	

//
// -----   HIDE LOCKED TREES  -----
//

function HideLockedTrees(){	
	var $el = $("#tree li .closed");	
	$el.each(function() {			
		$(this).parent().parent().find("ul").first().addClass("visuallyhidden");
	});
}
	
	
	
//
// >>>>>   OPEN A CLOSED TREE    >>>>>
//

function openTree(obj, th) {
	AttachGen5Tree(obj);
	obj.removeClass("visuallyhidden");
	obj.css("opacity","0");
	obj.addClass("visuallyvisible");
	obj.css("overflow","visible");
	obj.animate({opacity: "1"}, 400);
	th.find(".icon-arrow-rounded-down").removeClass("icon-arrow-rounded-down").addClass("icon-heart");
	th.find(".icon-lock").removeClass("icon-lock").addClass("icon-heart");
	th.parent().removeClass("closed").addClass("opened");
	
}


//
// >>>>>   IF TREE CONTAINS ADMINISTERED TREE, ATTACH 5 GEN HTML from the beginning    >>>>>
//

function CheckAttachGen5AdministeredTree() {
	$.each(aGen5Trees, function(i){		
		if (aGen5Trees[i].indexOf("rel-admin") != -1) {
			var $gen5Tree = $("#tree").find("[rel-gen5Id='" + i + "']");			
			AttachGen5Tree($gen5Tree);
		}		
	});
}



 
//
// >>>>>   ATTACH 5 GEN HTML (if not already attached)    >>>>>
//

// var that stores gen5 tree html
var aGen5Trees = new Array();

function AttachGen5Tree($tree) {
	if ($tree.hasClass('gen5')){
		if (!$tree.data('attached')){
			var relGen5Id = $tree.attr('rel-gen5Id');
			$tree.empty();			
			$tree.append(aGen5Trees[relGen5Id].replace('undefined',''));			
			AssignTreeNodeActions($tree.find('.node'));
			AssignTreeOpenActions($tree);			
			$tree.data("attached",true);
			CenterVertically ($tree.find(".center-v"));
			CenterHorizontally ($tree.find(".center-h"));
		}
	}		
}

// center vertically dom elements 
function CenterVertically ($el) {
	$el.each(function() {
		$(this).css("margin-top", $(this).parent().height()/2 - $(this).height()/2 +"px");	     
	});
}

function CenterHorizontally ($el) {
	$el.each(function() {
	     $(this).css("margin-left", $(this).parent().outerWidth()/2 - $(this).outerWidth()/2 +"px");		 
	});
}


// makes height equal to percentual width
$.fn.heightEqWidth = function() {
	var nElementW = $(this).outerWidth();
	$(this).css("height",nElementW);
}

// get the pixel value of a property
$.fn.getPixels = function(property) {
	if (this.css(property).search("px")==-1){
		return 0;
	} else {
    	return parseInt(this.css(property).slice(0,-2));
    }
};



$(document).ready(function() {
  $(window).keydown(function(event){
    if(event.keyCode == 13) {
      event.preventDefault();
      return false;
    }
  });
});